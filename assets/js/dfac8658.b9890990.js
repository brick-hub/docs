"use strict";(self.webpackChunkbrickhub_docs=self.webpackChunkbrickhub_docs||[]).push([[361],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(n),m=a,k=s["".concat(p,".").concat(m)]||s[m]||u[m]||i;return n?r.createElement(k,o(o({ref:t},d),{},{components:n})):r.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},6877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={slug:"/brick-structure",description:"Learn about the structure of a brick.",sidebar_position:2},o="\ud83e\uddf1 Structure of a Brick",l={unversionedId:"creating_bricks/brick_structure",id:"creating_bricks/brick_structure",title:"\ud83e\uddf1 Structure of a Brick",description:"Learn about the structure of a brick.",source:"@site/docs/creating_bricks/brick_structure.md",sourceDirName:"creating_bricks",slug:"/brick-structure",permalink:"/brick-structure",draft:!1,editUrl:"https://github.com/brick-hub/docs.brickhub.dev/tree/main/docs/creating_bricks/brick_structure.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/brick-structure",description:"Learn about the structure of a brick.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\u2728 Creating Bricks",permalink:"/mason-new"},next:{title:"\ud83e\udd78 Brick Syntax",permalink:"/brick-syntax"}},p={},c=[{value:"\ud83d\ude80 Overview",id:"-overview",level:2},{value:"<code>brick.yaml</code>",id:"brickyaml",level:2},{value:"Variable Types",id:"variable-types",level:2},{value:"<code>__brick__</code>",id:"__brick__",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-structure-of-a-brick"},"\ud83e\uddf1 Structure of a Brick"),(0,a.kt)("h2",{id:"-overview"},"\ud83d\ude80 Overview"),(0,a.kt)("p",null,"If we take a closer look at the example brick we just generated, it should look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 __brick__\n\u2514\u2500\u2500 brick.yaml\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"CHANGELOG"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"LICENSE"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"README")," are all standard files found across many projects so we won't focus on them. The two important entities are the ",(0,a.kt)("inlineCode",{parentName:"p"},"__brick__")," directory and the ",(0,a.kt)("inlineCode",{parentName:"p"},"brick.yaml")," file."),(0,a.kt)("h2",{id:"brickyaml"},(0,a.kt)("inlineCode",{parentName:"h2"},"brick.yaml")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"brick.yaml")," file is a manifest which contains metadata for the current brick. The newly generated ",(0,a.kt)("inlineCode",{parentName:"p"},"brick.yaml")," should look something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"name: example\ndescription: A new brick created with the Mason CLI.\n\n# The following defines the brick repository url.\n# Uncomment and update the following line before publishing the brick.\n# repository: https://github.com/my_org/my_repo\n\n# The following defines the version and build number for your brick.\n# A version number is three numbers separated by dots, like 1.2.34\n# followed by an optional build number (separated by a +).\nversion: 0.1.0+1\n\n# The following defines the environment for the current brick.\n# It includes the version of mason that the brick requires.\nenvironment:\n  mason: '>=0.1.0-dev <0.1.0'\n\n# Variables specify dynamic values that your brick depends on.\n# Zero or more variables can be specified for a given brick.\n# Each variable has:\n#  * a type (string, number, boolean, enum, or array)\n#  * an optional short description\n#  * an optional default value\n#  * an optional list of default values (array only)\n#  * an optional prompt phrase used when asking for the variable\n#  * a list of values (enums only)\nvars:\n  name:\n    type: string\n    description: Your name\n    default: Dash\n    prompt: What is your name?\n")),(0,a.kt)("h2",{id:"variable-types"},"Variable Types"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"A primitive string"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'"Dash"'))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",{parentName:"tr",align:null},"A primitive number"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"42"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"A primitive boolean"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,a.kt)("inlineCode",{parentName:"td"},"false"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"enum")),(0,a.kt)("td",{parentName:"tr",align:null},"An enumeration (single choice)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'["red", "green", "blue"]')," -> ",(0,a.kt)("inlineCode",{parentName:"td"},'"red"'))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"array")),(0,a.kt)("td",{parentName:"tr",align:null},"An array of strings (multiple choices)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'["red", "green", "blue"]')," -> ",(0,a.kt)("inlineCode",{parentName:"td"},'["red", "blue"]'))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"list")),(0,a.kt)("td",{parentName:"tr",align:null},"A dynamic list of strings (open ended)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'["c++", "dart", "python"]'))))),(0,a.kt)("h2",{id:"__brick__"},(0,a.kt)("inlineCode",{parentName:"h2"},"__brick__")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"__brick__")," directory contains the template for your brick. Any files, directories within the ",(0,a.kt)("inlineCode",{parentName:"p"},"__brick__")," will be generated when the brick is used via ",(0,a.kt)("inlineCode",{parentName:"p"},"mason make"),"."),(0,a.kt)("p",null,"In the example brick, our ",(0,a.kt)("inlineCode",{parentName:"p"},"__brick__")," directory contains a single file called ",(0,a.kt)("inlineCode",{parentName:"p"},"HELLO.md")," with the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-md"},"# Hello {{name}}!\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Templates currently support ",(0,a.kt)("a",{parentName:"p",href:"https://mustache.github.io/"},"mustache")," but support for additional templating specifications is on the roadmap.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://mustache.github.io/mustache.5.html"},"mustache specification")," for more information about ",(0,a.kt)("inlineCode",{parentName:"p"},"mustache")," and its capabilities.")))}u.isMDXComponent=!0}}]);