"use strict";(self.webpackChunkbrickhub_docs=self.webpackChunkbrickhub_docs||[]).push([[875],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=i,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2362:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={slug:"/mason-init",description:"Learn how to initialize mason in your current workspace.",sidebar_position:2},o="Initializing Mason CLI \ud83d\udcc1",l={unversionedId:"getting_started/mason_init",id:"getting_started/mason_init",title:"Initializing Mason CLI \ud83d\udcc1",description:"Learn how to initialize mason in your current workspace.",source:"@site/docs/getting_started/mason_init.md",sourceDirName:"getting_started",slug:"/mason-init",permalink:"/mason-init",draft:!1,editUrl:"https://github.com/brick-hub/docs.brickhub.dev/tree/main/docs/getting_started/mason_init.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/mason-init",description:"Learn how to initialize mason in your current workspace.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installing Mason CLI \ud83e\uddd1\u200d\ud83d\udcbb",permalink:"/installing"},next:{title:"Installing Bricks \ud83e\uddf1",permalink:"/mason-get"}},s={},c=[],p={toc:c};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"initializing-mason-cli-"},"Initializing Mason CLI \ud83d\udcc1"),(0,i.kt)("p",null,"Once ",(0,i.kt)("inlineCode",{parentName:"p"},"mason_cli")," is installed, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," command to initialize ",(0,i.kt)("inlineCode",{parentName:"p"},"mason")," in the current directory. This will generate a ",(0,i.kt)("inlineCode",{parentName:"p"},"mason.yaml")," and allow ",(0,i.kt)("inlineCode",{parentName:"p"},"mason")," to work with bricks scoped locally within the workspace."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"mason")," will always use the nearest parent ",(0,i.kt)("inlineCode",{parentName:"p"},"mason.yaml"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mason init\n")),(0,i.kt)("p",null,"Once we run, ",(0,i.kt)("inlineCode",{parentName:"p"},"mason init"),", we should have a ",(0,i.kt)("inlineCode",{parentName:"p"},"mason.yaml")," that looks something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# Register bricks which can be consumed via the Mason CLI.\n# https://github.com/felangel/mason\nbricks:\n  # Sample Brick\n  # Run `mason make hello` to try it out.\n  hello: any\n  # Bricks can also be imported via git url.\n  # Uncomment the following lines to import\n  # a brick from a remote git url.\n  # widget:\n  #   git:\n  #     url: https://github.com/felangel/mason.git\n  #     path: bricks/widget\n")))}m.isMDXComponent=!0}}]);