"use strict";(self.webpackChunkbrickhub_docs=self.webpackChunkbrickhub_docs||[]).push([[983],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),k=d(a),u=l,c=k["".concat(p,".").concat(u)]||k[u]||s[u]||r;return a?n.createElement(c,i(i({ref:t},m),{},{components:a})):n.createElement(c,i({ref:t},m))}));function u(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},6248:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=a(7462),l=(a(7294),a(3905));const r={slug:"/brick-syntax",description:"Learn about the brick template syntax.",sidebar_position:3},i="Brick Syntax \ud83e\udd78",o={unversionedId:"creating_bricks/brick_syntax",id:"creating_bricks/brick_syntax",title:"Brick Syntax \ud83e\udd78",description:"Learn about the brick template syntax.",source:"@site/docs/creating_bricks/brick_syntax.md",sourceDirName:"creating_bricks",slug:"/brick-syntax",permalink:"/brick-syntax",draft:!1,editUrl:"https://github.com/brick-hub/docs.brickhub.dev/tree/main/docs/creating_bricks/brick_syntax.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/brick-syntax",description:"Learn about the brick template syntax.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Structure of a Brick \ud83e\uddf1",permalink:"/brick-structure"},next:{title:"Brick Development \ud83e\uddd1\u200d\ud83d\udcbb",permalink:"/brick-development"}},p={},d=[{value:"Overview \ud83d\ude80",id:"overview-",level:2},{value:"Conditionals \ud83d\udea6",id:"conditionals-",level:2},{value:"Loops \ud83d\udd01",id:"loops-",level:2},{value:"Lambdas \u2728",id:"lambdas-",level:2},{value:"Built-in Lambdas",id:"built-in-lambdas",level:3},{value:"Partials \ud83d\udcc4",id:"partials-",level:2},{value:"File Resolution \ud83d\uddc3",id:"file-resolution-",level:2}],m={toc:d};function s(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"brick-syntax-"},"Brick Syntax \ud83e\udd78"),(0,l.kt)("h2",{id:"overview-"},"Overview \ud83d\ude80"),(0,l.kt)("p",null,"Write your brick template in the ",(0,l.kt)("inlineCode",{parentName:"p"},"__brick__")," directory using ",(0,l.kt)("a",{parentName:"p",href:"https://mustache.github.io/"},"mustache templates"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"__brick__/example.md")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-md"},"# Hello {{name}}!\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://mustache.github.io/mustache.5.html"},"mustache manual")," for detailed usage information.")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"__brick__")," directory can contain multiple files and subdirectories.")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"{{{variable}}}")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"{{variable}}")," when you want the value of ",(0,l.kt)("inlineCode",{parentName:"p"},"variable")," to be unescaped.")),(0,l.kt)("h2",{id:"conditionals-"},"Conditionals \ud83d\udea6"),(0,l.kt)("p",null,"It's possible to conditionally render parts of your template based on boolean variable values."),(0,l.kt)("p",null,"For example, if we have a ",(0,l.kt)("inlineCode",{parentName:"p"},"__brick__/pubspec.yaml")," file with the following contents:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"{{^publish}}\npublish_to: none\n{{/publish}}\ndependencies:\n  flutter:\n    sdk: flutter\n  {{#useGoogleFonts}}\n  google_fonts: latest\n  {{/useGoogleFonts}}\n")),(0,l.kt)("p",null,"If we generate a ",(0,l.kt)("inlineCode",{parentName:"p"},"pubspec.yaml")," from the template with the following variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "publish": false,\n  "useGoogleFonts": true\n}\n')),(0,l.kt)("p",null,"The generated output will look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"publish_to: none\ndependencies:\n  flutter:\n    sdk: flutter\n  google_fonts: latest\n")),(0,l.kt)("p",null,"It's also possible to conditionally generate files by applying the same mustache syntax to file paths."),(0,l.kt)("p",null,"For example, if we want to conditionally generate a ",(0,l.kt)("inlineCode",{parentName:"p"},"CHANGELOG.md"),", our ",(0,l.kt)("inlineCode",{parentName:"p"},"__brick__")," directory structure would look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 __brick__\n\u2502   \u2514\u2500\u2500 {{#createChangelog}}CHANGELOG.md{{/createChangelog}}\n")),(0,l.kt)("p",null,"If we run ",(0,l.kt)("inlineCode",{parentName:"p"},"mason make")," from the template with the following variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "createChangelog": false\n}\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"CHANGELOG.md")," would not be generated."),(0,l.kt)("h2",{id:"loops-"},"Loops \ud83d\udd01"),(0,l.kt)("p",null,"We can also have loops in templates in response to array variable values."),(0,l.kt)("p",null,"For example, if we have a ",(0,l.kt)("inlineCode",{parentName:"p"},"__brick__/README.md")," file with the following contents:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"{{#platforms}}\n{{.}}\n{{/platforms}}\n")),(0,l.kt)("p",null,"If we generate a ",(0,l.kt)("inlineCode",{parentName:"p"},"README.md")," from the template with the following variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "platforms": ["iOS", "Android", "Web"]\n}\n')),(0,l.kt)("p",null,"The generated output will look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-md"},"iOS\n\nAndroid\n\nWeb\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Using ",(0,l.kt)("inlineCode",{parentName:"p"},"{{.}}")," in a loop allows us to render the current value at each iteration of the loop.")),(0,l.kt)("h2",{id:"lambdas-"},"Lambdas \u2728"),(0,l.kt)("p",null,"Mason supports functions that manipulate the rendered output called lambdas."),(0,l.kt)("p",null,"For example, if we have a ",(0,l.kt)("inlineCode",{parentName:"p"},"__brick__/{{name.snakeCase()}}.md")," file with the following contents:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"import 'package:flutter/widgets.dart';\n\nclass {{name.pascalCase()}} extends StatelessWidget {\n  const {{name.pascalCase()}}({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const SizedBox();\n  }\n}\n")),(0,l.kt)("p",null,"If we generate a file from the template with the following variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "mason widget"\n}\n')),(0,l.kt)("p",null,"The generated output will be a file named ",(0,l.kt)("inlineCode",{parentName:"p"},"mason_widget.dart")," with the following contents:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/widgets.dart';\n\nclass MasonWidget extends StatelessWidget {\n  const MasonWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const SizedBox();\n  }\n}\n")),(0,l.kt)("h3",{id:"built-in-lambdas"},"Built-in Lambdas"),(0,l.kt)("p",null,"Mason supports a handful of built-in lambdas that can help with customizing generated code:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"),(0,l.kt)("th",{parentName:"tr",align:null},"Shorthand Syntax"),(0,l.kt)("th",{parentName:"tr",align:null},"Full Syntax"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"camelCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"helloWorld")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.camelCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#camelCase}}{{variable}}{{/camelCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"constantCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"HELLO_WORLD")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.constantCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#constantCase}}{{variable}}{{/constantCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"dotCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"hello.world")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.dotCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#dotCase}}{{variable}}{{/dotCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"headerCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Hello-World")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.headerCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#headerCase}}{{variable}}{{/headerCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"lowerCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"hello world")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.lowerCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#lowerCase}}{{variable}}{{/lowerCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"mustacheCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{ Hello World }}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.mustacheCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#mustacheCase}}{{variable}}{{/mustacheCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pascalCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"HelloWorld")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.pascalCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#pascalCase}}{{variable}}{{/pascalCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"paramCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"hello-world")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.paramCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#paramCase}}{{variable}}{{/paramCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pathCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"hello/world")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.pathCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#pathCase}}{{variable}}{{/pathCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"sentenceCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Hello world")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.sentenceCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#sentenceCase}}{{variable}}{{/sentenceCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"snakeCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"hello_world")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.snakeCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#snakeCase}}{{variable}}{{/snakeCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"titleCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Hello World")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.titleCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#titleCase}}{{variable}}{{/titleCase}}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"upperCase")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"HELLO WORLD")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{variable.upperCase()}}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{{#upperCase}}{{variable}}{{/upperCase}}"))))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example Usage")),(0,l.kt)("p",null,"Given the following example brick:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"__brick__\n  \u251c\u2500\u2500 {{name.snakeCase()}}.md\n  \u2514\u2500\u2500 {{name.pascalCase()}}.java\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"brick.yaml"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"name: example\ndescription: An example brick.\nversion: 0.1.0+1\nvars:\n  name:\n    type: string\n    description: Your name\n    default: Dash\n    prompt: What is your name?\n")),(0,l.kt)("p",null,"We can generate code via:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"mason make example --name my-name\n")),(0,l.kt)("p",null,"The output will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 my_name.md\n\u2514\u2500\u2500 MyName.java\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Lambdas can be applied to file names as well as file contents.")),(0,l.kt)("h2",{id:"partials-"},"Partials \ud83d\udcc4"),(0,l.kt)("p",null,"It is possible to have templates nested within other templates. For example, given the follow ",(0,l.kt)("inlineCode",{parentName:"p"},"__brick__")," structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 HELLO.md\n\u251c\u2500\u2500 {{~ footer.md }}\n\u2514\u2500\u2500 {{~ header.md }}\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"{{~ header.md }}")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"{{~ footer.md }}")," are partials (partial brick templates). Partials will not be generated but can be included as part of an existing template."),(0,l.kt)("p",null,"For example given the contents of ",(0,l.kt)("inlineCode",{parentName:"p"},"{{~ header.md }}")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"{{~ footer.md }}")," respectively"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-md"},"# \ud83e\uddf1 {{name}}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-md"},"_made with \ud83d\udc96 by mason_\n")),(0,l.kt)("p",null,"we can include the partials as part of a template via ",(0,l.kt)("inlineCode",{parentName:"p"},"{{> header.md }}")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"{{> footer.md }}"),"."),(0,l.kt)("p",null,"In this example, given ",(0,l.kt)("inlineCode",{parentName:"p"},"HELLO.md"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-md"},"{{> header.md }}\n\nHello {{name}}!\n\n{{> footer.md }}\n")),(0,l.kt)("p",null,"We can use ",(0,l.kt)("inlineCode",{parentName:"p"},"mason make hello --name Mason")," to generate ",(0,l.kt)("inlineCode",{parentName:"p"},"HELLO.md"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-md"},"# \ud83e\uddf1 Mason\n\nHello Mason!\n\n_made with \ud83d\udc96 by mason_\n")),(0,l.kt)("p",null,"\u2757 ",(0,l.kt)("strong",{parentName:"p"},"Note: Partials can contain variables just like regular templates")),(0,l.kt)("h2",{id:"file-resolution-"},"File Resolution \ud83d\uddc3"),(0,l.kt)("p",null,"It is possible to resolve files based on path input variables using the ",(0,l.kt)("inlineCode",{parentName:"p"},"{{% %}}")," tag."),(0,l.kt)("p",null,"For example, given the following ",(0,l.kt)("inlineCode",{parentName:"p"},"brick.yaml"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"name: app_icon\ndescription: Create an app icon file from a URL\nversion: 0.1.0+1\nvars:\n  url:\n    type: string\n    description: The app icon URL.\n    prompt: Enter your app icon URL.\n")),(0,l.kt)("p",null,"And the following brick template:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"__brick__/{{% url %}}")),(0,l.kt)("p",null,"Running ",(0,l.kt)("inlineCode",{parentName:"p"},"mason make app_icon --url path/to/icon.png")," will generate ",(0,l.kt)("inlineCode",{parentName:"p"},"icon.png")," with the contents of ",(0,l.kt)("inlineCode",{parentName:"p"},"path/to/icon.png")," where the ",(0,l.kt)("inlineCode",{parentName:"p"},"path/to/icon.png")," can be either a local or remote path. Check out the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/felangel/mason/tree/master/bricks/app_icon"},"app icon example brick")," to try it out."))}s.isMDXComponent=!0}}]);