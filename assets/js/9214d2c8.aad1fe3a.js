"use strict";(self.webpackChunkbrickhub_docs=self.webpackChunkbrickhub_docs||[]).push([[880],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return t?a.createElement(k,i(i({ref:n},c),{},{components:t})):a.createElement(k,i({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2493:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const r={slug:"/mason-new",sidebar_position:3},i="Creating Bricks \u2728\ud83e\uddf1",l={unversionedId:"mason_new",id:"mason_new",title:"Creating Bricks \u2728\ud83e\uddf1",description:"In this section, we'll take a look at how to use the mason new command to create your own bricks.",source:"@site/docs/mason_new.md",sourceDirName:".",slug:"/mason-new",permalink:"/mason-new",draft:!1,editUrl:"https://github.com/brick-hub/docs.brickhub.dev/tree/main/docs/mason_new.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/mason-new",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Using Bricks \ud83d\udc77\ud83e\uddf1",permalink:"/mason-make"}},s={},p=[{value:"Overview \ud83d\ude80",id:"overview-",level:2},{value:"Anatomy of a Brick \ud83e\uddf1",id:"anatomy-of-a-brick-",level:2},{value:"<code>brick.yaml</code>",id:"brickyaml",level:3},{value:"<code>__brick__</code>",id:"__brick__",level:3},{value:"Custom Description \u270d\ufe0f",id:"custom-description-\ufe0f",level:2},{value:"Custom Output Directory \ud83d\uddc2",id:"custom-output-directory-",level:2},{value:"Hooks \ud83e\ude9d",id:"hooks-",level:2},{value:"Hooks Usage \u2728",id:"hooks-usage-",level:3},{value:"Disabling Hooks \u274c",id:"disabling-hooks-",level:3}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-bricks-"},"Creating Bricks \u2728\ud83e\uddf1"),(0,o.kt)("p",null,"In this section, we'll take a look at how to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"mason new")," command to create your own bricks."),(0,o.kt)("h2",{id:"overview-"},"Overview \ud83d\ude80"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mason new")," command allows us to create a new, custom brick template in the current working directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ mason new example\n\u2713 Created new brick: example (74ms)\n\u2713 Generated 5 file(s):\n  /me/mason_playground/example/brick.yaml (new)\n  /me/mason_playground/example/README.md (new)\n  /me/mason_playground/example/CHANGELOG.md (new)\n  /me/mason_playground/example/LICENSE (new)\n  /me/mason_playground/example/__brick__/HELLO.md (new)\n")),(0,o.kt)("h2",{id:"anatomy-of-a-brick-"},"Anatomy of a Brick \ud83e\uddf1"),(0,o.kt)("p",null,"If we take a closer look at the example brick we just generated, it should look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 __brick__\n\u2514\u2500\u2500 brick.yaml\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"CHANGELOG"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"LICENSE"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"README")," are all standard files found across many projects so we won't focus on them. The two important entities are the ",(0,o.kt)("inlineCode",{parentName:"p"},"__brick__")," directory and the ",(0,o.kt)("inlineCode",{parentName:"p"},"brick.yaml")," file."),(0,o.kt)("h3",{id:"brickyaml"},(0,o.kt)("inlineCode",{parentName:"h3"},"brick.yaml")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"brick.yaml")," file is a manifest which contains metadata for the current brick. The newly generated ",(0,o.kt)("inlineCode",{parentName:"p"},"brick.yaml")," should look something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: example\ndescription: An example brick\n\n# The following defines the version and build number for your brick.\n# A version number is three numbers separated by dots, like 1.2.34\n# followed by an optional build number (separated by a +).\nversion: 0.1.0+1\n\n# The following defines the environment for the current brick.\n# It includes the version of mason that the brick requires.\nenvironment:\n  mason: '>=0.1.0-dev <0.1.0'\n\n# Variables specify dynamic values that your brick depends on.\n# Zero or more variables can be specified for a given brick.\n# Each variable has:\n#  * a type (string, number, boolean, enum, or array)\n#  * an optional short description\n#  * an optional default value\n#  * an optional list of default values (array only)\n#  * an optional prompt phrase used when asking for the variable\n#  * a list of values (enums only)\nvars:\n  name:\n    type: string\n    description: Your name.\n    default: Dash\n    prompt: What is your name?\n")),(0,o.kt)("h3",{id:"__brick__"},(0,o.kt)("inlineCode",{parentName:"h3"},"__brick__")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"__brick__")," directory contains the template for your brick. Any files, directories within the ",(0,o.kt)("inlineCode",{parentName:"p"},"__brick__")," will be generated when the brick is used via ",(0,o.kt)("inlineCode",{parentName:"p"},"mason make"),"."),(0,o.kt)("p",null,"In the example brick, our ",(0,o.kt)("inlineCode",{parentName:"p"},"__brick__")," directory contains a single file called ",(0,o.kt)("inlineCode",{parentName:"p"},"HELLO.md")," with the following content:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-md"},"# Hello {{name}}!\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Templates currently support ",(0,o.kt)("a",{parentName:"p",href:"https://mustache.github.io/"},"mustache")," but support for additional templating specifications is on the roadmap.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://mustache.github.io/mustache.5.html"},"mustache specification")," for more information about ",(0,o.kt)("inlineCode",{parentName:"p"},"mustache")," and its capabilities.")),(0,o.kt)("h2",{id:"custom-description-\ufe0f"},"Custom Description \u270d\ufe0f"),(0,o.kt)("p",null,"We can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--desc")," option to specify a custom brick description when creating a new brick via ",(0,o.kt)("inlineCode",{parentName:"p"},"mason new"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ mason new example --desc "My awesome brick"\n')),(0,o.kt)("h2",{id:"custom-output-directory-"},"Custom Output Directory \ud83d\uddc2"),(0,o.kt)("p",null,"Similarly to ",(0,o.kt)("inlineCode",{parentName:"p"},"mason make"),", we can specify a custom output directory when creating a new brick via the ",(0,o.kt)("inlineCode",{parentName:"p"},"-o")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ mason new example -o ./path/to/brick\n")),(0,o.kt)("h2",{id:"hooks-"},"Hooks \ud83e\ude9d"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Mason")," supports custom script execution via hooks."),(0,o.kt)("p",null,"The supported hooks are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pre_gen")," - executed immediately before the generation step"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"post_gen")," - executed immediately after the generation step")),(0,o.kt)("p",null,"Hooks must be defined in the hooks directory at the root of the brick:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 __brick__\n\u251c\u2500\u2500 brick.yaml\n\u2514\u2500\u2500 hooks\n    \u251c\u2500\u2500 post_gen.dart\n    \u251c\u2500\u2500 pre_gen.dart\n    \u2514\u2500\u2500 pubspec.yaml\n")),(0,o.kt)("p",null,"The easiest way to get started with hooks is by specifying the ",(0,o.kt)("inlineCode",{parentName:"p"},"--hooks")," flag when creating a new brick:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ mason new example --hooks\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Currently ",(0,o.kt)("inlineCode",{parentName:"p"},"mason")," only supports hooks written in Dart.")),(0,o.kt)("h3",{id:"hooks-usage-"},"Hooks Usage \u2728"),(0,o.kt)("p",null,"Every hook must contain a ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," method which accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"HookContext")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"package:mason/mason.dart"),"."),(0,o.kt)("p",null,"Hooks can be used to manipulate variables, interface with the logger, and more:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"pre_gen.dart"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:io';\nimport 'package:mason/mason.dart';\n\nvoid run(HookContext context) {\n  // Read vars.\n  final name = context.vars['name'];\n\n  // Use the `Logger` instance.\n  context.logger.info('Hello $name!');\n\n  // Update vars.\n  context.vars['current_year'] = DateTime.now().year;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"post_gen.dart"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:io';\nimport 'package:mason/mason.dart';\n\nFuture<void> run(HookContext context) async {\n  final progress = context.logger.progress('Installing packages');\n\n  // Run `flutter packages get` after generation.\n  await Process.run('flutter', ['packages', 'get']);\n\n  progress.complete();\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The working directory of the hook is the directory in which the code is generated.")),(0,o.kt)("h3",{id:"disabling-hooks-"},"Disabling Hooks \u274c"),(0,o.kt)("p",null,"Hook execution can be disabled using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--no-hooks")," flag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Disable hook script execution\n$ mason make example --name Mason --no-hooks\n")))}m.isMDXComponent=!0}}]);